WebGLUtils=function(){var e=function(e){return'<table style="background-color: #8CE; width: 100%; height: 100%;"><tr><td align="center"><div style="display: table-cell; vertical-align: middle;"><div style="">'+e+"</div></div></td></tr></table>"},t='This page requires a browser that supports WebGL.<br/><a href="http://get.webgl.org">Click here to upgrade your browser.</a>',i='It doesn\'t appear your computer can support WebGL.<br/><a href="http://get.webgl.org/troubleshooting/">Click here for more information.</a>',r=function(e,t){for(var i=["webgl","experimental-webgl","webkit-3d","moz-webgl"],r=null,a=0;a<i.length;++a){try{r=e.getContext(i[a],t)}catch(e){}if(r)break}return r};return{create3DContext:r,setupWebGL:function(a,o,n){n=n||function(r){var o=a.parentNode;if(o){var n=window.WebGLRenderingContext?i:t;r&&(n+="<br/><br/>Status: "+r),o.innerHTML=e(n)}},a.addEventListener&&a.addEventListener("webglcontextcreationerror",function(e){n(e.statusMessage)},!1);var l=r(a,o);return l||window.WebGLRenderingContext||n(""),l}}}(),window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e,t){window.setTimeout(e,1e3/60)};class Player{constructor(e,t,i,r,a,o,n,l){this.id=e,this.startLocation=[...t],this.location=[...t],this.range=o,this.width=20,this.height=100,this.color=r,this.nickname=a,this.velocity=15,this.direction90Vector=vec2.rotate(vec3.fromValues(0,0,0),[0,1],[0,0],i),this.direction=directions.PAUSE,this.angle=i,this.drawingMode=gl.TRIANGLE_STRIP,this.score=n,this.isAlive=l,this.lastUpdate=(new Date).getTime(),this.edgeLeft={mvMatrix:mat4.create(),computeVertices:()=>[...rotated([-3,3],i),...rotated([3,3],i),...rotated([-3,-3],i),...rotated([3,-3],i)],color:WHITE,drawingMode:gl.TRIANGLE_STRIP},this.edgeRight={...this.edgeLeft},mat4.identity(this.edgeLeft.mvMatrix),mat4.translate(this.edgeLeft.mvMatrix,this.edgeLeft.mvMatrix,normalToClip(Object.create(t))),mat4.translate(this.edgeLeft.mvMatrix,this.edgeLeft.mvMatrix,normalToClip(vec3.scale(vec3.create(),this.direction90Vector,o/2+this.height/2))),this.edgeRight.mvMatrix=mat4.create(),mat4.identity(this.edgeRight.mvMatrix),mat4.translate(this.edgeRight.mvMatrix,this.edgeRight.mvMatrix,normalToClip(Object.create(t))),mat4.translate(this.edgeRight.mvMatrix,this.edgeRight.mvMatrix,normalToClip(vec3.scale(vec3.create(),this.direction90Vector,-o/2-this.height/2))),this.mvMatrix=mat4.create(),mat4.identity(this.mvMatrix),mat4.translate(this.mvMatrix,this.mvMatrix,normalToClip(Object.create(t))),this.computeVertices=(()=>[...rotated([-this.width/2,this.height/2],i),...rotated([this.width/2,this.height/2],i),...rotated([-this.width/2,-this.height/2],i),...rotated([this.width/2,-this.height/2],i)]),this.move=(()=>{const e=(new Date).getTime();if(0!==this.direction){const t=vec3.scale(vec3.create(),this.direction90Vector,.08*(e-this.lastUpdate)*this.velocity*this.direction);mat4.translate(this.mvMatrix,this.mvMatrix,normalToClip(t)),vec3.add(this.location,this.location,t)}this.lastUpdate=e}),this.translateTo=(e=>{mat4.translate(this.mvMatrix,this.mvMatrix,normalToClip([e[0]-this.location[0],e[1]-this.location[1],0])),this.location=[...e],this.lastUpdate=(new Date).getTime()})}}const rotated=(e,t)=>vec2.rotate(vec2.create(),e,[0,0],t),directions={PAUSE:0,FORWARD:1,BACKWARD:-1};class Ball{constructor(e,t){this.location=Object.create(e),this.radius=10,this.velocity=[0,0,0],this.mvMatrix=mat4.create(),this.color=t,this.drawingMode=gl.TRIANGLE_FAN,this.lastUpdate=(new Date).getTime(),mat4.identity(this.mvMatrix),mat4.translate(this.mvMatrix,this.mvMatrix,normalToClip(Object.create(e))),this.computeVertices=(()=>{const e=[0,0];for(let t=0;t<=60;t++)e.push(Math.cos(2*t*Math.PI/60)*this.radius),e.push(Math.sin(2*t*Math.PI/60)*this.radius);return e}),this.move=(()=>{const e=(new Date).getTime(),t=vec3.scale(vec3.create(),this.velocity,.08*(e-this.lastUpdate));mat4.translate(this.mvMatrix,this.mvMatrix,normalToClip(t)),vec3.add(this.location,this.location,t),this.lastUpdate=e}),this.translateTo=(e=>{mat4.translate(this.mvMatrix,this.mvMatrix,normalToClip([e[0]-this.location[0],e[1]-this.location[1],0])),this.location=[...e],this.lastUpdate=(new Date).getTime()})}}const handleKeyDown=(e,t,i)=>{const r=e[t];null!=r&&("ArrowUp"===i.code&&r.direction!==directions.BACKWARD||"ArrowDown"===i.code&&r.direction!==directions.FORWARD)&&(r.direction=(i.ctrlKey||i.metaKey?3:1)*("ArrowUp"===i.code?directions.BACKWARD:directions.FORWARD),wsEmitMove(r))},handleKeyUp=(e,t,i)=>{const r=e[t];null!=r&&("ArrowUp"!==i.code&&"ArrowDown"!==i.code||(r.direction=directions.PAUSE,wsEmitMove(r)))},initKeyBinding=(e,t)=>{document.onkeydown=(i=>handleKeyDown(e,t,i)),document.onkeyup=(i=>handleKeyUp(e,t,i))},ACCELERATION=1.05,ELIMINATION_DISTANCE=20,handleBallWithPlayerCollision=(e,t,i)=>{const r=vec3.fromValues(0,0,0),a=vec2.subtract(vec3.create(),t.location,e.location);if(vec2.rotate(a,a,[0,0],-e.angle),Math.abs(a[0]-r[0])<=t.radius+e.width/2&&(a[0]-r[0])*i>=0&&Math.abs(a[1]-r[1])<=t.radius+e.height/2){const r=e.direction90Vector,o=vec2.create();vec2.rotate(o,r,[0,0],Math.PI/2);const n=vec2.dot(t.velocity,r),l=vec3.fromValues(0,0,0);vec2.scale(l,r,n);const s=vec2.dot(t.velocity,o),c=vec2.scale(vec3.fromValues(0,0,0),o,-s);vec3.add(t.velocity,l,c),vec3.scale(t.velocity,t.velocity,1.05);const d=vec2.rotate(vec3.fromValues(0,0,0),[(t.radius+e.width/2)*i,a[1],0],[0,0],e.angle);t.translateTo([e.location[0]+d[0],e.location[1]+d[1]]),wsEmitBallLocation(t,e.id)}},handleElimination=(e,t,i)=>{const r=vec3.fromValues(0,0,0),a=vec2.subtract(vec3.create(),t.location,e.location);vec2.rotate(a,a,[0,0],-e.angle),a[0]-t.radius<=r[0]-20&&(console.log("kick player "+e.nickname+"("+e.id+")"),i(e.id))},handleBallWithCanvasCollision=()=>{(ball.location[1]-ball.radius<0||ball.location[1]+ball.radius>=canvas.height)&&(vec3.multiply(ball.velocity,ball.velocity,[1,-1,1]),vec3.scale(ball.velocity,ball.velocity,1.05)),(ball.location[0]-ball.radius<0||ball.location[0]+ball.radius>=canvas.height)&&(vec3.multiply(ball.velocity,ball.velocity,[-1,1,1]),vec3.scale(ball.velocity,ball.velocity,1.05))},handlePlayerRange=(e,t)=>{const i=vec3.subtract(vec3.create(),t.location,t.startLocation);if(vec2.rotate(i,i,[0,0],-t.angle),i[1]>t.range/2||i[1]<-t.range/2){i[1]=t.range/2*(i[1]<-t.range/2?-1:1);const e=vec2.rotate(vec3.create(),i,[0,0],t.angle);t.translateTo([t.startLocation[0]+e[0],t.startLocation[1]+e[1]])}},handleCollision=(e,t,i,r)=>{null!=t[currentPlayerId]&&(handlePlayerRange(0,t[currentPlayerId]),handleBallWithPlayerCollision(t[currentPlayerId],i,1),handleBallWithPlayerCollision(t[currentPlayerId],i,-1),handleElimination(t[currentPlayerId],i,r)),handleBallWithCanvasCollision()};let shaderProgram,resolution;const initGL=e=>{let t;try{(t=e.getContext("webgl")).viewportWidth=e.width,t.viewportHeight=e.height,resolution=[e.width,e.height,1]}catch(e){}return t||console.log("Could not initialize WebGL."),t},vertexShaderSource="\n  uniform vec2 uResolution;\n  attribute vec2 aVertexPosition;\n  attribute vec4 aVertexColor;\n\n  uniform mat4 uMVMatrix;\n\n  varying vec4 vColor;\n\n  void main(void) {\n    // Convert the rectangle from pixels to 0.0 to 1.0\n    vec2 zeroToOne = aVertexPosition / uResolution;\n    // Convert from 0->1 to 0->2\n    vec2 zeroToTwo = zeroToOne * 2.0;\n    // Convert from 0->2 to -1->+1 (clipspace)\n    vec2 clipSpace = zeroToTwo - 1.0;\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0.0, 1.0);\n    gl_Position = uMVMatrix * vec4(clipSpace * vec2(1, -1), 0.0, 1.0);\n    vColor = aVertexColor;\n  }\n",fragmentShaderSource="\n   precision mediump float;\n\n   varying vec4 vColor;\n\n   void main(void) {\n    gl_FragColor = vColor;\n   }\n  ";function loadShader(e,t,i){const r=e.createShader(t);return e.shaderSource(r,i),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS)?r:(alert("An error occurred compiling the shaders: "+e.getShaderInfoLog(r)),e.deleteShader(r),null)}const initShaders=e=>{const t=loadShader(e,e.VERTEX_SHADER,vertexShaderSource),i=loadShader(e,e.FRAGMENT_SHADER,fragmentShaderSource);shaderProgram=e.createProgram(),e.attachShader(shaderProgram,t),e.attachShader(shaderProgram,i),e.linkProgram(shaderProgram),e.getProgramParameter(shaderProgram,e.LINK_STATUS)||alert("Could not initialize shaders"),e.useProgram(shaderProgram),shaderProgram.resolutionUniform=e.getUniformLocation(shaderProgram,"uResolution"),shaderProgram.vertexPositionAttribute=e.getAttribLocation(shaderProgram,"aVertexPosition"),e.enableVertexAttribArray(shaderProgram.vertexPositionAttribute),shaderProgram.vertexColorAttribute=e.getAttribLocation(shaderProgram,"aVertexColor"),e.enableVertexAttribArray(shaderProgram.vertexColorAttribute),shaderProgram.mvMatrixUniform=e.getUniformLocation(shaderProgram,"uMVMatrix")},drawingMVMatrices=[],drawingVertexBuffers=[],drawingColorBuffers=[],drawingMode=[],initBuffers=e=>{e.vertexBuffer=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,e.vertexBuffer);const t=e.computeVertices();gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(t),gl.STATIC_DRAW),e.vertexBuffer.itemSize=2,e.vertexBuffer.numItems=t.length/2,e.colors=[];for(let i=0;i<t.length/2;i++)e.colors=e.colors.concat(e.color);e.colorBuffer=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,e.colorBuffer),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(e.colors),gl.STATIC_DRAW),e.colorBuffer.itemSize=4,e.colorBuffer.numItems=t.length/2,drawingMVMatrices.push(e.mvMatrix),drawingVertexBuffers.push(e.vertexBuffer),drawingColorBuffers.push(e.colorBuffer),drawingMode.push(e.drawingMode)},refillBuffers=e=>{drawingMVMatrices.push(e.mvMatrix),drawingVertexBuffers.push(e.vertexBuffer),drawingColorBuffers.push(e.colorBuffer),drawingMode.push(e.drawingMode)},setMatrixUniforms=e=>{gl.uniform2f(shaderProgram.resolutionUniform,canvas.width,canvas.height),gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform,!1,e)},drawScene=()=>{let e,t,i;gl.viewport(0,0,gl.viewportWidth,gl.viewportHeight),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);for(let r=drawingVertexBuffers.length;r>0;r--){let r=drawingMVMatrices.pop();e=drawingVertexBuffers.pop(),t=drawingColorBuffers.pop(),i=drawingMode.pop(),gl.bindBuffer(gl.ARRAY_BUFFER,e),gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,e.itemSize,gl.FLOAT,!1,0,0),gl.bindBuffer(gl.ARRAY_BUFFER,t),gl.vertexAttribPointer(shaderProgram.vertexColorAttribute,t.itemSize,gl.FLOAT,!1,0,0),setMatrixUniforms(r),gl.drawArrays(i,0,i===gl.TRIANGLE_FAN?101:4)}},wsEmitMove=e=>{socket.emit("player-location",{id:e.id,location:e.location,direction:e.direction})},wsEmitBallLocation=(e,t)=>{socket.emit("ball-location",{location:e.location,velocity:e.velocity,mvMatrix:e.mvMatrix,playerId:t})},wsEmitElimination=(e,t)=>{socket.emit("elimination",{id:e,roundId:t})},wsEmitNewGame=()=>{socket.emit("new-game",{})},wsEmitJoin=e=>{socket.emit("join",{id:currentPlayerId,nickname:e})},wsEmitPing=()=>{socket.emit("ping-request",{time:(new Date).getTime()})};function displayCountDown(){for(let e=5;e>=0;e--)setTimeout(()=>overlay.innerHTML=0===e?"GO!":e,2500-500*e);setTimeout(()=>overlay.innerHTML="",3e3)}const initPing=()=>{setInterval(()=>void socket.emit("ping-request",{time:(new Date).getTime()}),1e3)},initWebSocketHandlers=(e,t,i,r)=>{const a=e=>{const t=new Player(e.id,e.location,e.angle,e.color,e.nickname,e.range,e.score,e.isAlive);return i(t),i(t.edgeLeft),i(t.edgeRight),t};socket.on("players-sync",i=>{for(let r of Object.values(i))null==e[r.id]&&(e[r.id]=a(r)),r.id!==t&&(e[r.id].translateTo([...r.location]),e[r.id].direction=r.direction),e[r.id].score=r.score;const o=Object.values(i).map(e=>e.id);Object.keys(e).filter(e=>!o.includes(e)).forEach(t=>delete e[t]),r(e)}),socket.on("new-round",t=>{roundId=t.roundId,ball.translateTo(Object.values(t.ball.location)),ball.velocity=[0,0,0];for(let i of t.players)e[i.id]=a(i),console.log("new-round init buffer");displayCountDown(),setTimeout(()=>{ball.velocity=t.ball.velocity},2500)}),socket.on("ball-sync",e=>{e.playerId!==t&&(ball.velocity=e.ball.velocity,ball.location=e.ball.location,ball.mvMatrix=mat4.fromValues(...Object.values(e.ball.mvMatrix)))}),socket.on("ping-response",e=>{document.getElementById("ping").innerHTML=((new Date).getTime()-e.time).toString()})},{mat4:mat4,vec3:vec3,vec2:vec2}=glMatrix,WHITE=[1,1,1,1];let gl,canvas,overlay;const players={};let ball,currentPlayerId,roundId=null;const initBall=()=>{ball=new Ball([400,400,0],WHITE),initBuffers(ball)},normalToClip=e=>{const t=vec3.divide(vec3.create(),e,resolution),i=vec3.multiply(vec3.create(),t,[2,2,2]);return vec3.multiply(i,i,[1,-1,0])},playerEliminated=e=>{overlay.innerHTML=`${players[e].nickname} has been eliminated`,ball.velocity=[0,0,0],setTimeout(()=>{overlay.innerHTML=""},1e3),wsEmitElimination(e,roundId)},handlePlayersMovement=e=>{for(let t of Object.values(e))t.move()},tick=()=>{requestAnimFrame(tick),handlePlayersMovement(players),handleCollision(0,players,ball,playerEliminated),drawScene(),ball.move(),animate(players,ball)},animate=(e,t)=>{for(let t of Object.values(e))t.isAlive&&(refillBuffers(t),refillBuffers(t.edgeLeft),refillBuffers(t.edgeRight));refillBuffers(t)},loadGame=()=>{canvas=document.getElementById("canvas"),overlay=document.getElementById("overlay"),gl=initGL(canvas),initShaders(gl),ball=new Ball([400,400,0],WHITE),initBuffers(ball),initKeyBinding(players,currentPlayerId),initWebSocketHandlers(players,currentPlayerId,initBuffers,printScore),setInterval(()=>void socket.emit("ping-request",{time:(new Date).getTime()}),1e3),gl.clearColor(.1875,.1875,.1875,1),gl.enable(gl.DEPTH_TEST),tick(),printScore(players)},printScore=e=>{document.getElementById("score").innerHTML=Object.values(e).map(e=>`player ${e.nickname}: ${e.score}`).join(", ")},newGame=()=>{socket.emit("new-game",{})},joinGame=()=>{const e=document.getElementById("nickname").value;null!=e&&wsEmitJoin(e)},connect=()=>{socket.on("connect",()=>{currentPlayerId=socket.id.split("#")[1],canvas=document.getElementById("canvas"),overlay=document.getElementById("overlay"),gl=initGL(canvas),initShaders(gl),ball=new Ball([400,400,0],WHITE),initBuffers(ball),initKeyBinding(players,currentPlayerId),initWebSocketHandlers(players,currentPlayerId,initBuffers,printScore),setInterval(()=>void socket.emit("ping-request",{time:(new Date).getTime()}),1e3),gl.clearColor(.1875,.1875,.1875,1),gl.enable(gl.DEPTH_TEST),tick(),printScore(players)})};socket.on("connect",()=>{currentPlayerId=socket.id.split("#")[1],canvas=document.getElementById("canvas"),overlay=document.getElementById("overlay"),gl=initGL(canvas),initShaders(gl),ball=new Ball([400,400,0],WHITE),initBuffers(ball),initKeyBinding(players,currentPlayerId),initWebSocketHandlers(players,currentPlayerId,initBuffers,printScore),setInterval(()=>void socket.emit("ping-request",{time:(new Date).getTime()}),1e3),gl.clearColor(.1875,.1875,.1875,1),gl.enable(gl.DEPTH_TEST),tick(),printScore(players)}),document.getElementById("newGameButton").onclick=newGame,document.getElementById("joinGameButton").onclick=joinGame;